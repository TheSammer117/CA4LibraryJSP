/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DAOs;

import interfaces.UserDAOInterface;
import DTOs.Loan;
import DTOs.Genre;
import DTOs.Title;
import DTOs.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author d00182295
 */
public class UserDAO extends DatabaseConnection implements UserDAOInterface {

    @Override
    public int login(String email, String password) {
        // Required for DB interaction
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int result = 0;
        List<User> users = new ArrayList();
        if (email != null && password != null) {
            try {
                con = getConnection();
                // Make query
                String query = "SELECT * FROM user WHERE email = ? AND password = ?";
                // Compile into SQL
                ps = con.prepareStatement(query);
                // (Fill in blanks of query)
                ps.setString(1, email);
                ps.setString(2, password);
                // Execute the SQL
                rs = ps.executeQuery();

                // check if user does exist inside database;......
                if (rs != null) {
                    result = rs.getInt("userID");
                } else {
                    return -1;
                }

            } catch (SQLException ex) {
                System.out.println("An exception occurred while querying "
                        + ex.getMessage());

            } // Shut down all open components
            finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    if (ps != null) {
                        ps.close();
                    }
                    if (con != null) {
                        freeConnection(con);
                    }
                } catch (SQLException e) {
                    System.out.println("An error occurred when shutting down the login() method: " + e.getMessage());
                }
            }
        } else{
            return -1;
        }
        return result;
    }

    @Override
    public int register(String email, String password, String firstName, String lastName, String primaryAddressLine1, String primaryAddressLine2, String primaryTown, String primaryCounty, String primaryEircode, String optAddressLine1, String optAddressLine2, String optTown, String optCounty, String optEircode) {
        // Required for DB interaction
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet generatedKeys = null;
        AddressDAO ad = new AddressDAO();
        int newId = -1;

        try {
            con = getConnection();
            // Make query
            String query = "INSERT INTO user VALUES (NULL,?,?,?,?,?,NULL,?)";
            // Compile into SQL
            ps = con.prepareStatement(query);
            // (Fill in blanks of query)
            ps.setString(1, email);
            ps.setString(2, password);
            ps.setString(3, firstName);
            ps.setString(4, lastName);
            int isAdmin = 0;
            ps.setInt(5, isAdmin);
            int active = 1;
            ps.setInt(6, active);
            // Execute the SQL
            ps.executeQuery();

            //find out what the id generated for this entry was
            generatedKeys = ps.getGeneratedKeys();
            //if there was a result, i.e. if the entry was inserted successfully
            if (generatedKeys.next()) {
                //get the id value that was generated by mySQL when the entry was inserted
                generatedKeys.getInt(1);
                //then add users address to address table
                User temp = getUserByEmail(email);
                int uID = temp.getUserID();
                ad.addAddress(uID, primaryAddressLine1, primaryAddressLine2, primaryTown, primaryCounty, primaryEircode, optAddressLine1, optAddressLine2, optTown, optCounty, optEircode);

            }

            /**
             * // To Check if that exist in the database ...... String query2 =
             * "SELECT * FROM user WHERE email = ? AND password = ?"; ps =
             * con.prepareStatement(query); ps.setString(1, email);
             * ps.setString(2, password); rs = ps.executeQuery();
             * //------------------------------------------------ // check if
             * user does exist inside database;...... if (rs != null) { check =
             * true; } else { check = false; }       *
             */
        } catch (SQLException ex) {
            System.out.println("An exception occurred while querying register()"
                    + ex.getMessage());
            newId = -1;
        } finally {
            try {
                if (generatedKeys != null) {
                    generatedKeys.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (con != null) {
                    freeConnection(con);
                }
            } catch (SQLException e) {
                System.out.println("An error occurred when shutting down the register() method: " + e.getMessage());
            }
        }
        return newId;
    }

    @Override
    public boolean disableUser(int userID, User user) {
        // Required for DB interaction
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        boolean check = false;
        List<UserDAO> users = new ArrayList();
        try {
            if (user.getIsAdmin() == 1) {
                con = getConnection();
                String query = "UPDATE user SET active = 0 WHERE userID = ? AND isAsmin = 0";
                ps = con.prepareStatement(query);
                ps.setInt(1, userID);
                rs = ps.executeQuery();
                check = true;
            } else {
                check = false;
            }
        } catch (SQLException ex) {
            System.out.println("An exception occurred while querying disableUser()"
                    + ex.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (con != null) {
                    freeConnection(con);
                }
            } catch (SQLException e) {
                System.out.println("An error occurred when shutting down the login() method: " + e.getMessage());
            }
        }
        return check;
    }

    @Override
    public List<User> showAllUser() {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        List<User> user = new ArrayList();

        try {
            conn = getConnection();

            String query = "SELECT * FROM user";
            ps = conn.prepareStatement(query);
            rs = ps.executeQuery();

            if (rs.next()) {
                User u = new User(rs.getInt("userID"), rs.getString("email"), rs.getString("password"), rs.getString("firstName"), rs.getString("lastName"), rs.getInt("isAdmin"), rs.getInt("isAdmin"));
                user.add(u);
            }

        } catch (SQLException e) {
            System.out.println("Exception occured in the findUserByID() method: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (conn != null) {
                    freeConnection(conn);
                }
            } catch (SQLException e) {
                System.out.println("Exception occured in the finally section of the findUserByID() method: " + e.getMessage());
            }
        }
        return user;
    }

    @Override
    public User getUserByEmail(String email) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        User user = null;

        try {
            conn = getConnection();
            String query = "SELECT * FROM user WHERE email = ?";
            ps = conn.prepareStatement(query);

            ps.setString(1, email);
            rs = ps.executeQuery();

            while (rs.next()) {
                user = new User();
                user.setUserID(rs.getInt("userID"));
                user.setEmail(rs.getString("email"));
                user.setFirstName(rs.getString("firstName"));
                user.setLastName(rs.getString("lastName"));
                user.setPassword(rs.getString("password"));
                user.setIsAdmin(rs.getInt("isAdmin"));
                user.setActive(rs.getInt("active"));
            }
        } catch (SQLException e) {
            System.out.println("Exception occured in the getUserByEmail() method");
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (conn != null) {
                    freeConnection(conn);
                }
            } catch (SQLException e) {
                System.out.println("Exception occured in the finally section in the getUserByEmail() method");
            }
        }

        return user;
    }

    public User findUserByID(int userID) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        User u = null;

        try {
            conn = getConnection();

            String query = "SELECT * FROM user WHERE userID = ?";
            ps = conn.prepareStatement(query);
            ps.setInt(1, userID);
            rs = ps.executeQuery();

            if (rs.next()) {
                u = new User(rs.getInt("userID"), rs.getString("email"), rs.getString("password"), rs.getString("firstName"), rs.getString("lastName"), rs.getInt("isAdmin"), rs.getInt("active"));
            }
        } catch (SQLException e) {
            System.out.println("Exception occured in the findUserByID() method: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (conn != null) {
                    freeConnection(conn);
                }
            } catch (SQLException e) {
                System.out.println("Exception occured in the finally section of the findUserByID() method: " + e.getMessage());
            }
        }
        return u;
    }

}
